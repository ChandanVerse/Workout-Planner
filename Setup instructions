üèãÔ∏è Workout Planner Web App
üîß Installation & Setup

1. Clone the Repository

```bash
git clone https://github.com/yourusername/workout-planner.git
cd workout-planner
```

2. Backend Setup

Create Python Virtual Environment

```bash
cd backend
python -m venv venv

# Windows
venv\Scripts\activate

# macOS/Linux
source venv/bin/activate
```

Install Dependencies

```bash
pip install -r requirements.txt
```

Database Setup

1. **Install PostgreSQL** (if not already installed):
   - Windows: Download from [postgresql.org](https://www.postgresql.org/download/)
   - macOS: `brew install postgresql`
   - Linux: `sudo apt-get install postgresql postgresql-contrib`

2. **Create Database**:
```sql
-- Connect to PostgreSQL as superuser
psql -U postgres

-- Create database and user
CREATE DATABASE workout_planner;
CREATE USER workout_user WITH PASSWORD 'your_password';
GRANT ALL PRIVILEGES ON DATABASE workout_planner TO workout_user;
\q
```

3. **Configure Environment Variables**:
```bash
# Create .env file in backend directory
cp .env.example .env

# Edit .env with your settings
DATABASE_URL=postgresql://workout_user:your_password@localhost/workout_planner
SECRET_KEY=your-secret-key-here
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
```

Initialize Database

```bash
# Run database migrations
python -c "
from database import engine
from models import SQLModel
SQLModel.metadata.create_all(bind=engine)
print('Database tables created successfully!')
"
```

Start Backend Server

```bash
uvicorn main:app --reload --port 8000
```

The backend will be available at `http://localhost:8000`

3. Frontend Setup

#### Install Dependencies

```bash
cd ../frontend
npm install
```

Configure API Endpoint

```bash
# Create .env file in frontend directory
echo "REACT_APP_API_URL=http://localhost:8000" > .env
```

Start Frontend Server

```bash
npm start
```

The frontend will be available at `http://localhost:3000`

üê≥ Docker Setup (Optional)

Backend Docker

```bash
cd backend

# Build Docker image
docker build -t workout-planner-backend .

# Run with Docker Compose
docker-compose up -d
```

Frontend Docker

```bash
cd frontend

# Build Docker image
docker build -t workout-planner-frontend .

# Run container
docker run -p 3000:3000 workout-planner-frontend
```

Full Stack Docker Compose

```yaml
# docker-compose.yml in root directory
version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: workout_planner
      POSTGRES_USER: workout_user
      POSTGRES_PASSWORD: your_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  backend:
    build: ./backend
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgresql://workout_user:your_password@postgres/workout_planner
      SECRET_KEY: your-secret-key-here
    volumes:
      - ./backend:/app

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://localhost:8000

volumes:
  postgres_data:
```

üìä Database Schema

Users Table
- `id`: Primary key
- `username`: Unique username
- `email`: User email
- `hashed_password`: Bcrypt hashed password
- `created_at`: Account creation timestamp

Exercises Table
- `id`: Primary key
- `name`: Exercise name
- `description`: Exercise description
- `muscle_group`: Target muscle group
- `equipment`: Required equipment
- `difficulty`: Difficulty level
- `embedding`: SentenceTransformer embedding vector

Plans Table
- `id`: Primary key
- `name`: Plan name
- `description`: Plan description
- `user_id`: Foreign key to users
- `goal`: Fitness goal
- `duration`: Plan duration in weeks
- `exercises`: JSON field containing exercise schedule
- `created_at`: Creation timestamp

Workouts Table
- `id`: Primary key
- `user_id`: Foreign key to users
- `exercise_id`: Foreign key to exercises
- `sets`: Number of sets
- `reps`: Number of reps
- `weight`: Weight used (optional)
- `date`: Workout date
- `created_at`: Log timestamp

üîê Authentication

The app uses JWT (JSON Web Tokens) for authentication:

1. **Registration**: Users create accounts with username/email/password
2. **Login**: Returns JWT token on successful authentication
3. **Protected Routes**: API endpoints require valid JWT token
4. **Token Refresh**: Tokens expire after 30 minutes (configurable)

üìà AI Exercise Recommendations

The system uses SentenceTransformer embeddings to provide intelligent exercise recommendations:

1. **Exercise Embeddings**: Each exercise is converted to a vector representation
2. **Similarity Search**: Finds exercises similar to user preferences
3. **Personalized Plans**: Generates plans based on goals, fitness level, and equipment
4. **Progressive Difficulty**: Adjusts recommendations based on user progress

üîó API Endpoints

Authentication
- `POST /auth/register` - User registration
- `POST /auth/login` - User login
- `GET /auth/me` - Get current user info

Exercises
- `GET /exercises/` - List all exercises
- `POST /exercises/` - Create new exercise
- `GET /exercises/{id}` - Get exercise details
- `GET /exercises/search` - Search exercises

Plans
- `GET /plans/` - List user's plans
- `POST /plans/` - Create new plan
- `GET /plans/{id}` - Get plan details
- `PUT /plans/{id}` - Update plan
- `DELETE /plans/{id}` - Delete plan

Workouts
- `GET /workouts/` - List user's workouts
- `POST /workouts/` - Log new workout
- `GET /workouts/stats` - Get workout statistics

üß™ Testing

Backend Tests

```bash
cd backend
pytest tests/ -v
```

Frontend Tests

```bash
cd frontend
npm test
```

üöÄ Deployment

Backend Deployment (Heroku)

1. **Create Heroku App**:
```bash
heroku create workout-planner-backend
```

2. **Add PostgreSQL**:
```bash
heroku addons:create heroku-postgresql:hobby-dev
```

3. **Set Environment Variables**:
```bash
heroku config:set SECRET_KEY=your-secret-key
```

4. **Deploy**:
```bash
git push heroku main
```

Frontend Deployment (Netlify)

1. **Build for Production**:
```bash
cd frontend
npm run build
```

2. **Deploy to Netlify**:
```bash
# Install Netlify CLI
npm install -g netlify-cli

# Deploy
netlify deploy --prod --dir=build
```

üìù Environment Variables

Backend (.env)
```env
DATABASE_URL=postgresql://user:password@localhost/workout_planner
SECRET_KEY=your-secret-key-here
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
CORS_ORIGINS=http://localhost:3000,https://your-frontend-domain.com
```

Frontend (.env)
```env
REACT_APP_API_URL=http://localhost:8000
REACT_APP_VERSION=1.0.0
```

üîß Troubleshooting

Common Issues

1. **Database Connection Error**:
   - Check PostgreSQL is running
   - Verify DATABASE_URL is correct
   - Ensure database and user exist

2. **CORS Issues**:
   - Add frontend URL to CORS_ORIGINS
   - Check API_URL in frontend .env

3. **JWT Token Issues**:
   - Verify SECRET_KEY is set
   - Check token expiration time
   - Clear browser localStorage

4. **Model Loading Error**:
   - Ensure SentenceTransformer model downloads
   - Check internet connection on first run
   - Verify sufficient disk space

Performance Optimization

1. **Database Indexing**:
```sql
-- Add indexes for better query performance
CREATE INDEX idx_workouts_user_date ON workouts(user_id, date);
CREATE INDEX idx_plans_user ON plans(user_id);
CREATE INDEX idx_exercises_muscle_group ON exercises(muscle_group);
```

2. **Frontend Optimization**:
   - Enable React.StrictMode
   - Use React.memo for expensive components
   - Implement lazy loading for charts

3. **Backend Optimization**:
   - Use connection pooling
   - Implement Redis caching
   - Add API rate limiting

üìö Contributing

1. Fork the repository
2. Create a feature branch: `git checkout -b feature-name`
3. Commit changes: `git commit -am 'Add feature'`
4. Push to branch: `git push origin feature-name`
5. Create Pull Request